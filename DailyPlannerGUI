import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class DailySchedulePlannerGUI extends JFrame {
    private JTextField taskNameField, timeField, dateField, numTasksField, startTimeField, startDateField;
    private JButton addTaskButton, setButton;
    private JTextArea tasksSummaryArea;

    private List<Task> tasks = new ArrayList<>();

    static class Task {
        String name;
        String dateTime;

        Task(String name, String dateTime) {
            this.name = name;
            this.dateTime = dateTime;
        }
    }

    public DailySchedulePlannerGUI() {
        setTitle("Daily Schedule Planner");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(8, 2));

        panel.add(new JLabel("Task Name:"));
        taskNameField = new JTextField();
        panel.add(taskNameField);

        panel.add(new JLabel("Time (hh:mm AM/PM):"));
        timeField = new JTextField();
        panel.add(timeField);

        panel.add(new JLabel("Date (yyyy-MM-dd):"));
        dateField = new JTextField();
        panel.add(dateField);

        addTaskButton = new JButton("Add Task");
        addTaskButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addTask();
            }
        });
        panel.add(addTaskButton);

        panel.add(new JLabel(""));

        panel.add(new JLabel("Number of Tasks:"));
        numTasksField = new JTextField();
        panel.add(numTasksField);

        panel.add(new JLabel("Start Time (hh:mm AM/PM):"));
        startTimeField = new JTextField();
        panel.add(startTimeField);

        panel.add(new JLabel("Start Date (yyyy-MM-dd):"));
        startDateField = new JTextField();
        panel.add(startDateField);

        setButton = new JButton("Set");
        setButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setSchedule();
            }
        });
        panel.add(setButton);

        tasksSummaryArea = new JTextArea();
        panel.add(new JScrollPane(tasksSummaryArea));

        add(panel);
        setVisible(true);
    }

    private void addTask() {
        String name = taskNameField.getText();
        String time = timeField.getText();
        String date = dateField.getText();
        if (!name.isEmpty() && !time.isEmpty() && !date.isEmpty()) {
            tasks.add(new Task(name, time + " " + date));
            updateTaskSummary();
        } else {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
        }
    }

    private void setSchedule() {
        int numberOfTasks = Integer.parseInt(numTasksField.getText());
        String startTime = startTimeField.getText();
        String startDate = startDateField.getText();

        if (!startTime.isEmpty() && !startDate.isEmpty() && numberOfTasks > 0) {
            // Sort tasks by dateTime
            Collections.sort(tasks, new Comparator<Task>() {
                @Override
                public int compare(Task t1, Task t2) {
                    return t1.dateTime.compareTo(t2.dateTime);
                }
            });

            // Merge user input time and date to create the nth term
            String userDateTime = startTime + " " + startDate;

            // Find kth term using nth date and time term
            int k = 0;
            for (int i = 0; i < tasks.size(); i++) {
                if (tasks.get(i).dateTime.compareTo(userDateTime) >= 0) {
                    k = i;
                    break;
                }
            }

            // Display top priorities and missed activities
            List<Task> topPriorities = new ArrayList<>(tasks.subList(k, k + numberOfTasks));
            List<Task> missedActivities = new ArrayList<>(tasks.subList(0, k));
            displayTasksSummary(topPriorities, "Top Priorities");
            displayTasksSummary(missedActivities, "Missed Activities");

            // Variable Size Decrease Algorithm (DFS)
            System.out.println("Top " + numberOfTasks + " tasks:");
            DFS(k, numberOfTasks);

            // Partition Based Algorithm
            partitionTasks(k);

        } else {
            JOptionPane.showMessageDialog(this, "Please fill all fields.");
        }
    }

    private void updateTaskSummary() {
        StringBuilder summary = new StringBuilder();
        for (Task task : tasks) {
            summary.append(task.name).append(" - ").append(task.dateTime).append("\n");
        }
        tasksSummaryArea.setText(summary.toString());
    }

    private void displayTasksSummary(List<Task> taskList, String title) {
        tasksSummaryArea.append(title + ":\n");
        for (Task task : taskList) {
            tasksSummaryArea.append(task.name + " - " + task.dateTime + "\n");
        }
        tasksSummaryArea.append("\n");
    }

    private void DFS(int start, int numberOfTasks) {
        for (int i = start; i < tasks.size() && numberOfTasks > 0; i++, numberOfTasks--) {
            Task task = tasks.get(i);
            System.out.println(task.name + " - " + task.dateTime);
        }
    }

    private void partitionTasks(int k) {
        List<Task> topPriorities = new ArrayList<>();
        List<Task> missedActivities = new ArrayList<>();

        for (Task task : tasks) {
            if (task.dateTime.compareTo(tasks.get(k).dateTime) >= 0) {
                topPriorities.add(task);
            } else {
                missedActivities.add(task);
            }
        }

        displayTasksSummary(topPriorities, "Top Priorities");
        displayTasksSummary(missedActivities, "Missed Activities");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DailySchedulePlannerGUI();
            }
        });
    }
}
